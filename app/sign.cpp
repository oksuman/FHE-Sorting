#include "sign.h"
#include <cstdlib>

// Based on the paper "Efficient Homomorphic Comparison Methods with Optimal
// Complexity" https://eprint.iacr.org/2019/1234
Ciphertext<lbcrypto::DCRTPoly> g_n(Ciphertext<lbcrypto::DCRTPoly> x,
                                   CryptoContext<DCRTPoly> cc) {
    std::vector<double> coeffs = {
        0.0, 1.077117252745569,    0.0, -0.36166113998402755,
        0.0, 0.2137420717859748,   0.0, -0.15635204788780485,
        0.0, 0.11749645501187332,  0.0, -0.10074154666447852,
        0.0, 0.08002086947825496,  0.0, -0.07533558758484624,
        0.0, 0.059514472116534836, 0.0, -0.06146663712787884,
        0.0, 0.04570084927999001,  0.0, -0.05403683682999072,
        0.0, 0.03364293851188723,  0.0, -0.054459493266273494};
    return cc->EvalChebyshevSeriesPS(x, coeffs, -1, 1);
}

Ciphertext<lbcrypto::DCRTPoly> f_n(Ciphertext<lbcrypto::DCRTPoly> x,
                                   CryptoContext<DCRTPoly> cc) {
    constexpr double c1 = 3.14208984375;
    constexpr double c3 = -7.33154296875;
    constexpr double c5 = 13.19677734375;
    constexpr double c7 = -15.71044921875;
    constexpr double c9 = 12.21923828125;
    constexpr double c11 = -5.99853515625;
    constexpr double c13 = 1.69189453125;
    constexpr double c15 = -0.20947265625;

    Ciphertext<lbcrypto::DCRTPoly> x2, x4, c1x, c3x, c5x, c7x, c9x, c11x, c13x,
        c15x;
    Ciphertext<lbcrypto::DCRTPoly> c3x3, c7x3, c11x3, c15x3;

// First parallel block: calculate x^2 and all cx terms
#pragma omp parallel sections
    {
#pragma omp section
        x2 = cc->EvalSquare(x);

#pragma omp section
        c1x = cc->EvalMult(x, c1);

#pragma omp section
        c3x = cc->EvalMult(x, c3);

#pragma omp section
        c5x = cc->EvalMult(x, c5);

#pragma omp section
        c7x = cc->EvalMult(x, c7);

#pragma omp section
        c9x = cc->EvalMult(x, c9);

#pragma omp section
        c11x = cc->EvalMult(x, c11);

#pragma omp section
        c13x = cc->EvalMult(x, c13);

#pragma omp section
        c15x = cc->EvalMult(x, c15);
    }

// Second parallel block: calculate x^4 and terms involving x^2
#pragma omp parallel sections
    {
#pragma omp section
        x4 = cc->EvalSquare(x2);

#pragma omp section
        c3x3 = cc->EvalMultAndRelinearize(c3x, x2);

#pragma omp section
        c7x3 = cc->EvalMultAndRelinearize(c7x, x2);

#pragma omp section
        c11x3 = cc->EvalMultAndRelinearize(c11x, x2);

#pragma omp section
        c15x3 = cc->EvalMultAndRelinearize(c15x, x2);
    }

    auto x8 = cc->EvalSquare(x4);

    auto y = c1x;
    cc->EvalAddInPlace(y, c3x3);

    auto c5x_plus_c7x3 = cc->EvalAdd(c5x, c7x3);
    cc->EvalAddInPlace(y, cc->EvalMultAndRelinearize(c5x_plus_c7x3, x4));

    auto tmp1 = cc->EvalAdd(c9x, c11x3);
    auto tmp2 = cc->EvalAdd(c13x, c15x3);
    cc->EvalAddInPlace(tmp1, cc->EvalMultAndRelinearize(tmp2, x4));
    cc->EvalAddInPlace(y, cc->EvalMultAndRelinearize(tmp1, x8));

    return y;
}

Ciphertext<lbcrypto::DCRTPoly> compositeSign(Ciphertext<lbcrypto::DCRTPoly> x,
                                             CryptoContext<DCRTPoly> cc, int dg,
                                             int df) {

    auto y = g_n(x, cc);
    for (int i = 1; i < dg; i++) {
        y = g_n(y, cc);
    }
    for (int i = 0; i < df; i++) {
        y = f_n(y, cc);
    }
    return y;
}

Ciphertext<lbcrypto::DCRTPoly> scaledLogistic(Ciphertext<lbcrypto::DCRTPoly> x,
                                              CryptoContext<DCRTPoly> cc,
                                              int dg) {
    auto y = g_n(x, cc);
    for (int i = 1; i < dg; i++) {
        y = g_n(y, cc);
    }
    const std::vector<double> logistic_coeffs = {
        0.00390625, 0.00248679,   0, -0.00082892,  0, 0.00049734,
        0,          -0.000355229, 0, 0.000276276,  0, -0.000226029,
        0,          0.000191241,  0, -0.000165728, 0, 0.000146216,
        0,          -0.00013081,  0, 0.000118337,  0, -0.000108032,
        0,          9.93744e-05,  0, -9.19983e-05, 0, 8.56386e-05,
        0,          -8.00984e-05, 0, 7.52289e-05,  0, -7.0915e-05,
        0,          6.70666e-05,  0, -6.36121e-05, 0, 6.04939e-05,
        0,          -5.76651e-05, 0, 5.5087e-05,   0, -5.27276e-05,
        0,          5.05603e-05,  0, -4.85623e-05, 0, 4.67146e-05,
        0,          -4.50006e-05, 0, 4.34064e-05,  0, -4.19198e-05,
        0,          4.05301e-05,  0, -3.92282e-05, 0, 3.8006e-05,
        0,          -3.68563e-05, 0, 3.57727e-05,  0, -3.47498e-05,
        0,          3.37826e-05,  0, -3.28665e-05, 0, 3.19976e-05,
        0,          -3.11723e-05, 0, 3.03875e-05,  0, -2.964e-05,
        0,          2.89274e-05,  0, -2.82473e-05, 0, 2.75973e-05,
        0,          -2.69756e-05, 0, 2.63804e-05,  0, -2.58098e-05,
        0,          2.52625e-05,  0, -2.47371e-05, 0, 2.42321e-05,
        0,          -2.37465e-05, 0, 2.32791e-05,  0, -2.28289e-05,
        0,          2.23949e-05,  0, -2.19763e-05, 0, 2.15723e-05,
        0,          -2.11821e-05, 0, 2.0805e-05,   0, -2.04403e-05,
        0,          2.00875e-05,  0, -1.97459e-05, 0, 1.9415e-05,
        0,          -1.90943e-05, 0, 1.87833e-05,  0, -1.84816e-05,
        0,          1.81888e-05,  0, -1.79044e-05, 0, 1.76282e-05,
        0,          -1.73596e-05, 0, 1.70986e-05,  0, -1.68446e-05,
        0,          1.65974e-05,  0, -1.63568e-05, 0, 1.61225e-05,
        0,          -1.58942e-05, 0, 1.56717e-05,  0, -1.54547e-05,
        0,          1.52432e-05,  0, -1.50367e-05, 0, 1.48353e-05,
        0,          -1.46386e-05, 0, 1.44465e-05,  0, -1.42589e-05,
        0,          1.40756e-05,  0, -1.38964e-05, 0, 1.37212e-05,
        0,          -1.35498e-05, 0, 1.33822e-05,  0, -1.32182e-05,
        0,          1.30577e-05,  0, -1.29005e-05, 0, 1.27467e-05,
        0,          -1.25959e-05, 0, 1.24483e-05,  0, -1.23036e-05,
        0,          1.21617e-05,  0, -1.20227e-05, 0, 1.18863e-05,
        0,          -1.17526e-05, 0, 1.16214e-05,  0, -1.14927e-05,
        0,          1.13664e-05,  0, -1.12424e-05, 0, 1.11207e-05,
        0,          -1.10012e-05, 0, 1.08838e-05,  0, -1.07685e-05,
        0,          1.06552e-05,  0, -1.05438e-05, 0, 1.04344e-05,
        0,          -1.03269e-05, 0, 1.02211e-05,  0, -1.01172e-05,
        0,          1.00149e-05,  0, -9.91433e-06, 0, 9.81539e-06,
        0,          -9.71804e-06, 0, 9.62225e-06,  0, -9.52797e-06,
        0,          9.43517e-06,  0, -9.34381e-06, 0, 9.25386e-06,
        0,          -9.16528e-06, 0, 9.07804e-06,  0, -8.99212e-06,
        0,          8.90747e-06,  0, -8.82407e-06, 0, 8.74189e-06,
        0,          -8.66091e-06, 0, 8.58109e-06,  0, -8.50241e-06,
        0,          8.42485e-06,  0, -8.34838e-06, 0, 8.27298e-06,
        0,          -8.19862e-06, 0, 8.12528e-06,  0, -8.05294e-06,
        0,          7.98158e-06,  0, -7.91118e-06, 0, 7.84172e-06,
        0,          -7.77317e-06, 0, 7.70553e-06,  0, -7.63877e-06,
        0,          7.57287e-06,  0, -7.50782e-06, 0, 7.4436e-06,
        0,          -7.38019e-06, 0, 7.31759e-06,  0, -7.25576e-06,
        0,          7.1947e-06,   0, -7.1344e-06,  0, 7.07483e-06,
        0,          -7.01599e-06, 0, 6.95785e-06,  0, -6.90042e-06,
        0,          6.84367e-06,  0, -6.78759e-06, 0, 6.73218e-06,
        0,          -6.67741e-06, 0, 6.62328e-06,  0, -6.56977e-06,
        0,          6.51688e-06,  0, -6.46459e-06, 0, 6.41289e-06,
        0,          -6.36178e-06, 0, 6.31124e-06,  0, -6.26126e-06,
        0,          6.21183e-06,  0, -6.16295e-06, 0, 6.11461e-06,
        0,          -6.06678e-06, 0, 6.01948e-06,  0, -5.97269e-06,
        0,          5.92639e-06,  0, -5.88059e-06, 0, 5.83528e-06,
        0,          -5.79044e-06, 0, 5.74607e-06,  0, -5.70216e-06,
        0,          5.6587e-06,   0, -5.6157e-06,  0, 5.57313e-06,
        0,          -5.531e-06,   0, 5.48929e-06,  0, -5.44801e-06,
        0,          5.40714e-06,  0, -5.36667e-06, 0, 5.32661e-06,
        0,          -5.28695e-06, 0, 5.24767e-06,  0, -5.20879e-06,
        0,          5.17027e-06,  0, -5.13214e-06, 0, 5.09437e-06,
        0,          -5.05696e-06, 0, 5.01991e-06,  0, -4.98322e-06,
        0,          4.94687e-06,  0, -4.91086e-06, 0, 4.8752e-06,
        0,          -4.83986e-06, 0, 4.80486e-06,  0, -4.77018e-06,
        0,          4.73582e-06,  0, -4.70177e-06, 0, 4.66804e-06,
        0,          -4.63461e-06, 0, 4.60149e-06,  0, -4.56867e-06,
        0,          4.53614e-06,  0, -4.5039e-06,  0, 4.47195e-06,
        0,          -4.44029e-06, 0, 4.40891e-06,  0, -4.3778e-06,
        0,          4.34696e-06,  0, -4.3164e-06,  0, 4.2861e-06,
        0,          -4.25607e-06, 0, 4.22629e-06,  0, -4.19678e-06,
        0,          4.16751e-06,  0, -4.1385e-06,  0, 4.10973e-06,
        0,          -4.08121e-06, 0, 4.05293e-06,  0, -4.02489e-06,
        0,          3.99709e-06,  0, -3.96952e-06, 0, 3.94217e-06,
        0,          -3.91506e-06, 0, 3.88817e-06,  0, -3.8615e-06,
        0,          3.83506e-06,  0, -3.80883e-06, 0, 3.78281e-06,
        0,          -3.75701e-06, 0, 3.73142e-06,  0, -3.70604e-06,
        0,          3.68086e-06,  0, -3.65588e-06, 0, 3.63111e-06,
        0,          -3.60653e-06, 0, 3.58215e-06,  0, -3.55797e-06,
        0,          3.53397e-06,  0, -3.51017e-06, 0, 3.48656e-06,
        0,          -3.46313e-06, 0, 3.43988e-06,  0, -3.41682e-06,
        0,          3.39394e-06,  0, -3.37123e-06, 0, 3.34871e-06,
        0,          -3.32635e-06, 0, 3.30417e-06,  0, -3.28217e-06,
        0,          3.26033e-06,  0, -3.23865e-06, 0, 3.21715e-06,
        0,          -3.19581e-06, 0, 3.17463e-06,  0, -3.15361e-06,
        0,          3.13275e-06,  0, -3.11205e-06, 0, 3.0915e-06,
        0,          -3.07111e-06, 0, 3.05088e-06,  0, -3.03079e-06,
        0,          3.01085e-06,  0, -2.99107e-06, 0, 2.97143e-06,
        0,          -2.95193e-06, 0, 2.93258e-06,  0, -2.91338e-06,
        0,          2.89431e-06,  0, -2.87539e-06, 0, 2.8566e-06,
        0,          -2.83795e-06, 0, 2.81944e-06,  0, -2.80107e-06,
        0,          2.78283e-06,  0, -2.76472e-06, 0, 2.74674e-06,
        0,          -2.72889e-06, 0, 2.71117e-06,  0, -2.69358e-06,
        0,          2.67611e-06,  0, -2.65878e-06, 0, 2.64156e-06,
        0,          -2.62447e-06, 0, 2.6075e-06,   0, -2.59065e-06,
        0,          2.57393e-06,  0, -2.55732e-06, 0, 2.54083e-06,
        0,          -2.52445e-06, 0, 2.50819e-06,  0, -2.49205e-06,
        0,          2.47602e-06,  0, -2.4601e-06,  0, 2.4443e-06,
        0,          -2.42861e-06, 0, 2.41302e-06,  0, -2.39755e-06,
        0,          2.38218e-06,  0, -2.36692e-06, 0, 2.35177e-06,
        0,          -2.33672e-06, 0, 2.32178e-06,  0, -2.30694e-06,
        0,          2.2922e-06,   0, -2.27756e-06, 0, 2.26303e-06,
        0,          -2.2486e-06,  0, 2.23426e-06,  0, -2.22002e-06,
        0,          2.20589e-06,  0, -2.19184e-06, 0, 2.1779e-06,
        0,          -2.16405e-06, 0, 2.15029e-06,  0, -2.13663e-06,
        0,          2.12306e-06,  0, -2.10959e-06, 0, 2.0962e-06,
        0,          -2.08291e-06, 0, 2.06971e-06,  0, -2.05659e-06,
        0,          2.04357e-06,  0, -2.03063e-06, 0, 2.01778e-06,
        0,          -2.00502e-06, 0, 1.99234e-06,  0, -1.97974e-06,
        0,          1.96724e-06,  0, -1.95481e-06, 0, 1.94247e-06,
        0,          -1.93021e-06, 0, 1.91804e-06,  0, -1.90594e-06,
        0,          1.89393e-06,  0, -1.882e-06,   0, 1.87014e-06,
        0,          -1.85836e-06, 0, 1.84667e-06,  0, -1.83505e-06,
        0,          1.82351e-06,  0, -1.81204e-06, 0, 1.80065e-06,
        0,          -1.78933e-06, 0, 1.77809e-06,  0, -1.76693e-06,
        0,          1.75584e-06,  0, -1.74482e-06, 0, 1.73387e-06,
        0,          -1.723e-06,   0, 1.71219e-06,  0, -1.70146e-06,
        0,          1.6908e-06,   0, -1.68021e-06, 0, 1.66968e-06,
        0,          -1.65923e-06, 0, 1.64885e-06,  0, -1.63853e-06,
        0,          1.62828e-06,  0, -1.6181e-06,  0, 1.60798e-06,
        0,          -1.59793e-06, 0, 1.58794e-06,  0, -1.57802e-06,
        0,          1.56817e-06,  0, -1.55838e-06, 0, 1.54865e-06,
        0,          -1.53898e-06, 0, 1.52938e-06,  0, -1.51984e-06,
        0,          1.51036e-06,  0, -1.50095e-06, 0, 1.49159e-06,
        0,          -1.48229e-06, 0, 1.47306e-06,  0, -1.46388e-06,
        0,          1.45477e-06,  0, -1.44571e-06, 0, 1.43671e-06,
        0,          -1.42777e-06, 0, 1.41888e-06,  0, -1.41005e-06,
        0,          1.40128e-06,  0, -1.39257e-06, 0, 1.38391e-06,
        0,          -1.37531e-06, 0, 1.36676e-06,  0, -1.35827e-06,
        0,          1.34983e-06,  0, -1.34144e-06, 0, 1.33311e-06,
        0,          -1.32484e-06, 0, 1.31661e-06,  0, -1.30844e-06,
        0,          1.30032e-06,  0, -1.29225e-06, 0, 1.28423e-06,
        0,          -1.27627e-06, 0, 1.26835e-06,  0, -1.26049e-06,
        0,          1.25268e-06,  0, -1.24491e-06, 0, 1.23719e-06,
        0,          -1.22953e-06, 0, 1.22191e-06,  0, -1.21434e-06,
        0,          1.20682e-06,  0, -1.19935e-06, 0, 1.19192e-06,
        0,          -1.18454e-06, 0, 1.17721e-06,  0, -1.16992e-06,
        0,          1.16268e-06,  0, -1.15549e-06, 0, 1.14834e-06,
        0,          -1.14124e-06, 0, 1.13418e-06,  0, -1.12716e-06,
        0,          1.1202e-06,   0, -1.11327e-06, 0, 1.10639e-06,
        0,          -1.09955e-06, 0, 1.09275e-06,  0, -1.086e-06,
        0,          1.07929e-06,  0, -1.07262e-06, 0, 1.066e-06,
        0,          -1.05941e-06, 0, 1.05287e-06,  0, -1.04637e-06,
        0,          1.03991e-06,  0, -1.03349e-06, 0, 1.02711e-06,
        0,          -1.02077e-06, 0, 1.01447e-06,  0, -1.00821e-06,
        0,          1.00199e-06,  0, -9.95808e-07, 0, 9.89665e-07,
        0,          -9.8356e-07,  0, 9.77494e-07,  0, -9.71465e-07,
        0,          9.65475e-07,  0, -9.59522e-07, 0, 9.53606e-07,
        0,          -9.47727e-07, 0, 9.41885e-07,  0, -9.3608e-07,
        0,          9.30311e-07,  0, -9.24578e-07, 0, 9.1888e-07,
        0,          -9.13219e-07, 0, 9.07593e-07,  0, -9.02001e-07,
        0,          8.96445e-07,  0, -8.90924e-07, 0, 8.85437e-07,
        0,          -8.79984e-07, 0, 8.74565e-07,  0, -8.6918e-07,
        0,          8.63828e-07,  0, -8.5851e-07,  0, 8.53225e-07,
        0,          -8.47973e-07, 0, 8.42754e-07,  0, -8.37567e-07,
        0,          8.32413e-07,  0, -8.2729e-07,  0, 8.222e-07,
        0,          -8.17141e-07, 0, 8.12113e-07,  0, -8.07117e-07,
        0,          8.02152e-07,  0, -7.97218e-07, 0, 7.92314e-07,
        0,          -7.87441e-07, 0, 7.82599e-07,  0, -7.77786e-07,
        0,          7.73003e-07,  0, -7.6825e-07,  0, 7.63526e-07,
        0,          -7.58832e-07, 0, 7.54167e-07,  0, -7.49531e-07,
        0,          7.44923e-07,  0, -7.40345e-07, 0, 7.35794e-07,
        0,          -7.31272e-07, 0, 7.26778e-07,  0, -7.22311e-07,
        0,          7.17873e-07,  0, -7.13462e-07, 0, 7.09078e-07,
        0,          -7.04721e-07, 0, 7.00391e-07,  0, -6.96089e-07,
        0,          6.91812e-07,  0, -6.87563e-07, 0, 6.83339e-07,
        0,          -6.79142e-07, 0, 6.74971e-07,  0, -6.70825e-07,
        0,          6.66705e-07,  0, -6.62611e-07, 0, 6.58542e-07,
        0,          -6.54498e-07, 0, 6.50479e-07,  0, -6.46485e-07,
        0,          6.42516e-07,  0, -6.38571e-07, 0, 6.3465e-07,
        0,          -6.30754e-07, 0, 6.26882e-07,  0, -6.23034e-07,
        0,          6.19209e-07,  0, -6.15409e-07, 0, 6.11631e-07,
        0,          -6.07877e-07, 0, 6.04146e-07,  0, -6.00439e-07,
        0,          5.96754e-07,  0, -5.93092e-07, 0, 5.89452e-07,
        0,          -5.85835e-07, 0, 5.8224e-07,   0, -5.78667e-07,
        0,          5.75117e-07,  0, -5.71588e-07, 0, 5.68081e-07,
        0,          -5.64596e-07, 0, 5.61132e-07,  0, -5.57689e-07,
        0,          5.54268e-07,  0, -5.50868e-07, 0, 5.47489e-07,
        0,          -5.44131e-07, 0, 5.40793e-07,  0, -5.37476e-07,
        0,          5.34179e-07,  0, -5.30903e-07, 0, 5.27646e-07,
        0,          -5.2441e-07,  0, 5.21194e-07,  0, -5.17998e-07,
        0,          5.14821e-07,  0, -5.11664e-07, 0, 5.08526e-07,
        0,          -5.05408e-07, 0, 5.02309e-07,  0, -4.99228e-07,
        0,          4.96167e-07,  0, -4.93125e-07, 0, 4.90101e-07,
        0,          -4.87096e-07, 0, 4.8411e-07,   0, -4.81142e-07,
        0,          4.78192e-07,  0, -4.7526e-07,  0, 4.72346e-07,
        0,          -4.6945e-07,  0, 4.66572e-07,  0, -4.63712e-07,
        0,          4.60869e-07,  0, -4.58044e-07, 0, 4.55236e-07,
        0,          -4.52446e-07, 0, 4.49672e-07,  0, -4.46916e-07,
        0,          4.44177e-07,  0, -4.41454e-07, 0, 4.38748e-07,
        0,          -4.36059e-07, 0, 4.33386e-07,  0, -4.3073e-07,
        0,          4.2809e-07,   0, -4.25466e-07, 0, 4.22858e-07,
        0,          -4.20267e-07, 0, 4.17691e-07,  0, -4.15131e-07,
        0,          4.12587e-07,  0, -4.10058e-07, 0, 4.07545e-07,
        0,          -4.05048e-07, 0, 4.02566e-07,  0, -4.00099e-07,
        0,          3.97647e-07,  0, -3.9521e-07,  0, 3.92788e-07,
        0,          -3.90381e-07, 0, 3.87989e-07,  0, -3.85611e-07,
        0,          3.83248e-07,  0, -3.809e-07,   0, 3.78566e-07,
        0,          -3.76246e-07, 0, 3.73941e-07,  0, -3.7165e-07,
        0,          3.69372e-07,  0, -3.67109e-07, 0, 3.6486e-07,
        0,          -3.62624e-07, 0, 3.60402e-07,  0, -3.58194e-07,
        0,          3.55999e-07,  0, -3.53818e-07, 0, 3.5165e-07,
        0,          -3.49495e-07, 0, 3.47354e-07,  0, -3.45226e-07,
        0,          3.43111e-07,  0, -3.41009e-07, 0, 3.38919e-07,
        0,          -3.36843e-07, 0, 3.34779e-07,  0, -3.32728e-07,
        0,          3.30689e-07,  0, -3.28663e-07, 0, 3.2665e-07,
        0,          -3.24648e-07, 0, 3.22659e-07,  0, -3.20682e-07,
        0,          3.18718e-07,  0, -3.16765e-07, 0, 3.14824e-07,
        0,          -3.12896e-07, 0, 3.10979e-07,  0, -3.09073e-07,
        0,          3.0718e-07,   0, -3.05298e-07, 0, 3.03427e-07,
        0,          -3.01568e-07, 0, 2.99721e-07,  0, -2.97885e-07,
        0,          2.9606e-07,   0, -2.94246e-07, 0, 2.92443e-07,
        0,          -2.90651e-07, 0, 2.88871e-07,  0, -2.87101e-07,
        0,          2.85342e-07,  0, -2.83594e-07, 0, 2.81856e-07,
        0,          -2.80129e-07, 0, 2.78413e-07,  0, -2.76707e-07,
        0,          2.75012e-07,  0, -2.73327e-07, 0, 2.71653e-07,
        0,          -2.69988e-07, 0, 2.68334e-07,  0, -2.6669e-07,
        0,          2.65056e-07,  0, -2.63432e-07, 0, 2.61818e-07,
        0,          -2.60214e-07, 0, 2.5862e-07,   0, -2.57035e-07,
        0,          2.5546e-07,   0, -2.53895e-07, 0, 2.52339e-07,
        0,          -2.50793e-07, 0, 2.49256e-07,  0, -2.47729e-07,
        0,          2.46211e-07,  0, -2.44703e-07, 0, 2.43203e-07,
        0,          -2.41713e-07, 0, 2.40232e-07,  0, -2.3876e-07,
        0,          2.37297e-07,  0, -2.35843e-07, 0, 2.34398e-07,
        0,          -2.32961e-07, 0, 2.31534e-07,  0, -2.30115e-07,
        0,          2.28705e-07,  0, -2.27303e-07, 0, 2.2591e-07,
        0,          -2.24526e-07, 0, 2.2315e-07,   0, -2.21782e-07,
        0,          2.20423e-07,  0, -2.19072e-07, 0, 2.1773e-07,
        0,          -2.16395e-07, 0, 2.15069e-07,  0, -2.13751e-07,
        0,          2.12441e-07,  0, -2.11139e-07, 0, 2.09845e-07,
        0,          -2.08559e-07, 0, 2.0728e-07,   0, -2.0601e-07,
        0,          2.04747e-07,  0, -2.03492e-07, 0, 2.02245e-07,
        0,          -2.01005e-07, 0, 1.99773e-07,  0, -1.98549e-07,
        0,          1.97331e-07,  0, -1.96122e-07, 0, 1.94919e-07,
        0,          -1.93725e-07, 0, 1.92537e-07,  0, -1.91357e-07,
        0,          1.90183e-07,  0, -1.89017e-07, 0, 1.87859e-07,
        0,          -1.86707e-07, 0, 1.85562e-07,  0, -1.84424e-07,
        0,          1.83294e-07,  0, -1.8217e-07,  0, 1.81053e-07,
        0,          -1.79942e-07, 0, 1.78839e-07,  0, -1.77742e-07,
        0,          1.76652e-07,  0, -1.75569e-07, 0, 1.74492e-07,
        0,          -1.73422e-07, 0, 1.72359e-07,  0, -1.71302e-07,
        0,          1.70251e-07,  0, -1.69207e-07, 0, 1.68169e-07,
        0,          -1.67137e-07, 0, 1.66112e-07,  0, -1.65093e-07,
        0,          1.64081e-07,  0, -1.63074e-07, 0, 1.62074e-07,
        0,          -1.61079e-07, 0, 1.60091e-07,  0, -1.59109e-07,
        0,          1.58133e-07,  0, -1.57162e-07, 0, 1.56198e-07,
        0,          -1.5524e-07,  0, 1.54287e-07,  0, -1.5334e-07,
        0,          1.52399e-07,  0, -1.51464e-07, 0, 1.50535e-07,
        0,          -1.49611e-07, 0, 1.48693e-07,  0, -1.4778e-07,
        0,          1.46873e-07,  0, -1.45971e-07, 0, 1.45075e-07,
        0,          -1.44185e-07, 0, 1.433e-07,    0, -1.4242e-07,
        0,          1.41546e-07,  0, -1.40677e-07, 0, 1.39813e-07,
        0,          -1.38954e-07, 0, 1.38101e-07,  0, -1.37253e-07,
        0,          1.3641e-07,   0, -1.35573e-07, 0, 1.3474e-07,
        0,          -1.33913e-07, 0, 1.3309e-07,   0, -1.32273e-07,
        0,          1.3146e-07,   0, -1.30653e-07, 0, 1.2985e-07,
        0,          -1.29052e-07, 0, 1.28259e-07,  0, -1.27471e-07,
        0,          1.26688e-07,  0, -1.2591e-07,  0, 1.25136e-07,
        0,          -1.24367e-07, 0, 1.23603e-07,  0, -1.22843e-07,
        0,          1.22088e-07,  0, -1.21338e-07, 0, 1.20592e-07,
        0,          -1.19851e-07, 0, 1.19114e-07,  0, -1.18381e-07,
        0,          1.17654e-07,  0, -1.1693e-07,  0, 1.16211e-07,
        0,          -1.15497e-07, 0, 1.14786e-07,  0, -1.1408e-07,
        0,          1.13379e-07,  0, -1.12681e-07, 0, 1.11988e-07,
        0,          -1.11299e-07, 0, 1.10614e-07,  0, -1.09934e-07,
        0,          1.09257e-07,  0, -1.08585e-07, 0, 1.07917e-07,
        0,          -1.07253e-07, 0, 1.06593e-07,  0, -1.05936e-07,
        0,          1.05284e-07,  0, -1.04636e-07, 0, 1.03992e-07,
        0,          -1.03352e-07, 0, 1.02715e-07,  0, -1.02083e-07,
        0,          1.01454e-07,  0, -1.00829e-07, 0, 1.00208e-07,
        0,          -9.95909e-08, 0, 9.89773e-08,  0, -9.83675e-08,
        0,          9.77614e-08,  0, -9.71589e-08, 0, 9.65602e-08,
        0,          -9.5965e-08,  0, 9.53735e-08,  0, -9.47856e-08,
        0,          9.42012e-08,  0, -9.36204e-08, 0, 9.30431e-08,
        0,          -9.24694e-08, 0, 9.18991e-08,  0, -9.13322e-08,
        0,          9.07688e-08,  0, -9.02088e-08, 0, 8.96523e-08,
        0,          -8.90991e-08, 0, 8.85492e-08,  0, -8.80027e-08,
        0,          8.74595e-08,  0, -8.69196e-08, 0, 8.6383e-08,
        0,          -8.58496e-08, 0, 8.53194e-08,  0, -8.47925e-08,
        0,          8.42687e-08,  0, -8.37482e-08, 0, 8.32308e-08,
        0,          -8.27165e-08, 0, 8.22053e-08,  0, -8.16972e-08,
        0,          8.11923e-08,  0, -8.06903e-08, 0, 8.01914e-08,
        0,          -7.96955e-08, 0, 7.92027e-08,  0, -7.87128e-08,
        0,          7.82259e-08,  0, -7.77419e-08, 0, 7.72608e-08,
        0,          -7.67827e-08, 0, 7.63074e-08,  0, -7.5835e-08,
        0,          7.53655e-08,  0, -7.48988e-08, 0, 7.4435e-08,
        0,          -7.39739e-08, 0, 7.35156e-08,  0, -7.30601e-08,
        0,          7.26073e-08,  0, -7.21573e-08, 0, 7.171e-08,
        0,          -7.12654e-08, 0, 7.08235e-08,  0, -7.03842e-08,
        0,          6.99476e-08,  0, -6.95136e-08, 0, 6.90823e-08,
        0,          -6.86535e-08, 0, 6.82274e-08,  0, -6.78038e-08,
        0,          6.73827e-08,  0, -6.69642e-08, 0, 6.65482e-08,
        0,          -6.61347e-08, 0, 6.57238e-08,  0, -6.53152e-08,
        0,          6.49092e-08,  0, -6.45056e-08, 0, 6.41044e-08,
        0,          -6.37056e-08, 0, 6.33092e-08,  0, -6.29153e-08,
        0,          6.25236e-08,  0, -6.21344e-08, 0, 6.17475e-08,
        0,          -6.13629e-08, 0, 6.09806e-08,  0, -6.06006e-08,
        0,          6.02229e-08,  0, -5.98474e-08, 0, 5.94742e-08,
        0,          -5.91033e-08, 0, 5.87346e-08,  0, -5.83681e-08,
        0,          5.80037e-08,  0, -5.76416e-08, 0, 5.72816e-08,
        0,          -5.69238e-08, 0, 5.65682e-08,  0, -5.62147e-08,
        0,          5.58632e-08,  0, -5.55139e-08, 0, 5.51667e-08,
        0,          -5.48216e-08, 0, 5.44785e-08,  0, -5.41375e-08,
        0,          5.37985e-08,  0, -5.34615e-08, 0, 5.31266e-08,
        0,          -5.27936e-08, 0, 5.24627e-08,  0, -5.21337e-08,
        0,          5.18067e-08,  0, -5.14816e-08, 0, 5.11584e-08,
        0,          -5.08372e-08, 0, 5.05179e-08,  0, -5.02006e-08,
        0,          4.98851e-08,  0, -4.95714e-08, 0, 4.92597e-08,
        0,          -4.89498e-08, 0, 4.86417e-08,  0, -4.83355e-08,
        0,          4.80311e-08,  0, -4.77285e-08, 0, 4.74277e-08,
        0,          -4.71287e-08, 0, 4.68314e-08,  0, -4.6536e-08,
        0,          4.62422e-08,  0, -4.59502e-08, 0, 4.566e-08,
        0,          -4.53715e-08, 0, 4.50846e-08,  0, -4.47995e-08,
        0,          4.45161e-08,  0, -4.42343e-08, 0, 4.39542e-08,
        0,          -4.36758e-08, 0, 4.3399e-08,   0, -4.31238e-08,
        0,          4.28502e-08,  0, -4.25783e-08, 0, 4.2308e-08,
        0,          -4.20393e-08, 0, 4.17721e-08,  0, -4.15065e-08,
        0,          4.12425e-08,  0, -4.098e-08,   0, 4.07191e-08,
        0,          -4.04597e-08, 0, 4.02019e-08,  0, -3.99455e-08,
        0,          3.96907e-08,  0, -3.94373e-08, 0, 3.91855e-08,
        0,          -3.89351e-08, 0, 3.86862e-08,  0, -3.84387e-08,
        0,          3.81927e-08,  0, -3.79481e-08, 0, 3.77049e-08,
        0,          -3.74632e-08, 0, 3.72229e-08,  0, -3.6984e-08,
        0,          3.67464e-08,  0, -3.65103e-08, 0, 3.62755e-08,
        0,          -3.60421e-08, 0, 3.58101e-08,  0, -3.55794e-08,
        0,          3.535e-08,    0, -3.5122e-08,  0, 3.48953e-08,
        0,          -3.46699e-08, 0, 3.44458e-08,  0, -3.4223e-08,
        0,          3.40015e-08,  0, -3.37813e-08, 0, 3.35623e-08,
        0,          -3.33446e-08, 0, 3.31282e-08,  0, -3.2913e-08,
        0,          3.26991e-08,  0, -3.24864e-08, 0, 3.22749e-08,
        0,          -3.20646e-08, 0, 3.18555e-08,  0, -3.16476e-08,
        0,          3.1441e-08,   0, -3.12355e-08, 0, 3.10312e-08,
        0,          -3.0828e-08,  0, 3.0626e-08,   0, -3.04252e-08,
        0,          3.02255e-08,  0, -3.0027e-08,  0, 2.98295e-08,
        0,          -2.96332e-08, 0, 2.94381e-08,  0, -2.9244e-08,
        0,          2.9051e-08,   0, -2.88591e-08, 0, 2.86683e-08,
        0,          -2.84786e-08, 0, 2.829e-08,    0, -2.81024e-08,
        0,          2.79159e-08,  0, -2.77304e-08, 0, 2.7546e-08,
        0,          -2.73626e-08, 0, 2.71803e-08,  0, -2.69989e-08,
        0,          2.68186e-08,  0, -2.66393e-08, 0, 2.6461e-08,
        0,          -2.62837e-08, 0, 2.61074e-08,  0, -2.5932e-08,
        0,          2.57577e-08,  0, -2.55843e-08, 0, 2.54119e-08,
        0,          -2.52404e-08, 0, 2.50699e-08,  0, -2.49003e-08,
        0,          2.47317e-08,  0, -2.4564e-08,  0, 2.43972e-08,
        0,          -2.42313e-08, 0, 2.40664e-08,  0, -2.39024e-08,
        0,          2.37392e-08,  0, -2.3577e-08,  0, 2.34156e-08,
        0,          -2.32551e-08, 0, 2.30955e-08,  0, -2.29368e-08,
        0,          2.27789e-08,  0, -2.26219e-08, 0, 2.24657e-08,
        0,          -2.23104e-08, 0, 2.21559e-08,  0, -2.20023e-08,
        0,          2.18495e-08,  0, -2.16975e-08, 0, 2.15463e-08,
        0,          -2.1396e-08,  0, 2.12464e-08,  0, -2.10977e-08,
        0,          2.09497e-08,  0, -2.08025e-08, 0, 2.06561e-08,
        0,          -2.05105e-08, 0, 2.03657e-08,  0, -2.02216e-08,
        0,          2.00783e-08,  0, -1.99357e-08, 0, 1.97939e-08,
        0,          -1.96529e-08, 0, 1.95125e-08,  0, -1.9373e-08,
        0,          1.92341e-08,  0, -1.9096e-08,  0, 1.89586e-08,
        0,          -1.88219e-08, 0, 1.86859e-08,  0, -1.85506e-08,
        0,          1.8416e-08,   0, -1.82821e-08, 0, 1.81489e-08,
        0,          -1.80164e-08, 0, 1.78845e-08,  0, -1.77533e-08,
        0,          1.76228e-08,  0, -1.7493e-08,  0, 1.73638e-08,
        0,          -1.72353e-08, 0, 1.71074e-08,  0, -1.69802e-08,
        0,          1.68536e-08,  0, -1.67276e-08, 0, 1.66023e-08,
        0,          -1.64776e-08, 0, 1.63535e-08,  0, -1.623e-08,
        0,          1.61072e-08,  0, -1.59849e-08, 0, 1.58633e-08,
        0,          -1.57422e-08, 0, 1.56217e-08,  0, -1.55019e-08,
        0,          1.53826e-08,  0, -1.52639e-08, 0, 1.51457e-08,
        0,          -1.50282e-08, 0, 1.49112e-08,  0, -1.47947e-08,
        0,          1.46788e-08,  0, -1.45635e-08, 0, 1.44487e-08,
        0,          -1.43345e-08, 0, 1.42208e-08,  0, -1.41076e-08,
        0,          1.3995e-08,   0, -1.38829e-08, 0, 1.37713e-08,
        0,          -1.36603e-08, 0, 1.35497e-08,  0, -1.34397e-08,
        0,          1.33302e-08,  0, -1.32211e-08, 0, 1.31126e-08,
        0,          -1.30046e-08, 0, 1.2897e-08,   0, -1.27899e-08,
        0,          1.26834e-08,  0, -1.25773e-08, 0, 1.24716e-08,
        0,          -1.23665e-08, 0, 1.22618e-08,  0, -1.21575e-08,
        0,          1.20538e-08,  0, -1.19504e-08, 0, 1.18476e-08,
        0,          -1.17452e-08, 0, 1.16432e-08,  0, -1.15416e-08,
        0,          1.14405e-08,  0, -1.13398e-08, 0, 1.12396e-08,
        0,          -1.11397e-08, 0, 1.10403e-08,  0, -1.09413e-08,
        0,          1.08428e-08,  0, -1.07446e-08, 0, 1.06468e-08,
        0,          -1.05494e-08, 0, 1.04525e-08,  0, -1.03559e-08,
        0,          1.02597e-08,  0, -1.01639e-08, 0, 1.00685e-08,
        0,          -9.97345e-09, 0, 9.87878e-09,  0, -9.78449e-09,
        0,          9.69056e-09,  0, -9.597e-09,   0, 9.50381e-09,
        0,          -9.41096e-09, 0, 9.31848e-09,  0, -9.22634e-09,
        0,          9.13455e-09,  0, -9.04311e-09, 0, 8.95201e-09,
        0,          -8.86124e-09, 0, 8.77081e-09,  0, -8.6807e-09,
        // 0,          8.59093e-09,  0, -8.50148e-09, 0, 8.41234e-09,
        // 0,          -8.32353e-09, 0, 8.23502e-09,  0, -8.14683e-09,
        // 0,          8.05895e-09,  0, -7.97136e-09, 0, 7.88408e-09,
        // 0,          -7.7971e-09,  0, 7.71041e-09,  0, -7.624e-09,
        // 0,          7.53789e-09,  0, -7.45206e-09, 0, 7.36651e-09,
        // 0,          -7.28124e-09, 0, 7.19624e-09,  0, -7.11151e-09,
        // 0,          7.02705e-09,  0, -6.94286e-09, 0, 6.85892e-09,
        // 0,          -6.77525e-09, 0, 6.69182e-09,  0, -6.60866e-09,
        // 0,          6.52574e-09,  0, -6.44306e-09, 0, 6.36063e-09,
        // 0,          -6.27844e-09, 0, 6.19648e-09,  0, -6.11476e-09,
        // 0,          6.03327e-09,  0, -5.952e-09,   0, 5.87096e-09,
        // 0,          -5.79014e-09, 0, 5.70954e-09,  0, -5.62915e-09,
        // 0,          5.54898e-09,  0, -5.46901e-09, 0, 5.38925e-09,
        // 0,          -5.3097e-09,  0, 5.23034e-09,  0, -5.15118e-09,
        // 0,          5.07221e-09,  0, -4.99344e-09, 0, 4.91485e-09,
        // 0,          -4.83645e-09, 0, 4.75823e-09,  0, -4.68018e-09,
        // 0,          4.60232e-09,  0, -4.52463e-09, 0, 4.44711e-09,
        // 0,          -4.36975e-09, 0, 4.29256e-09,  0, -4.21553e-09,
        // 0,          4.13867e-09,  0, -4.06195e-09, 0, 3.98539e-09,
        // 0,          -3.90898e-09, 0, 3.83272e-09,  0, -3.7566e-09,
        // 0,          3.68062e-09,  0, -3.60478e-09, 0, 3.52908e-09,
        // 0,          -3.45351e-09, 0, 3.37807e-09,  0, -3.30276e-09,
        // 0,          3.22757e-09,  0, -3.1525e-09,  0, 3.07755e-09,
        // 0,          -3.00272e-09, 0, 2.928e-09,    0, -2.85339e-09,
        // 0,          2.77889e-09,  0, -2.70449e-09, 0, 2.6302e-09,
        // 0,          -2.556e-09,   0, 2.4819e-09,   0, -2.40789e-09,
        // 0,          2.33398e-09,  0, -2.26015e-09, 0, 2.18641e-09,
        // 0,          -2.11274e-09, 0, 2.03916e-09,  0, -1.96566e-09,
        // 0,          1.89223e-09,  0, -1.81887e-09, 0, 1.74558e-09,
        // 0,          -1.67235e-09, 0, 1.59919e-09,  0, -1.52609e-09,
        // 0,          1.45305e-09,  0, -1.38006e-09, 0, 1.30712e-09,
        // 0,          -1.23423e-09, 0, 1.16139e-09,  0, -1.08859e-09,
        // 0,          1.01583e-09,  0, -9.43112e-10, 0, 8.70429e-10,
        // 0,          -7.97778e-10, 0, 7.25157e-10,  0, -6.52564e-10,
        // 0,          5.79995e-10,  0, -5.07448e-10, 0, 4.3492e-10,
        // 0,          -3.62408e-10,
    };
    y = cc->EvalChebyshevSeriesPS(y, logistic_coeffs, -1, 1);

    return y;
}

// Source of signum
// https://github.com/fairmath/polycircuit/blob/main/include/polycircuit/component/SignEvaluation/SignEvaluation.hpp#L29
Ciphertext<lbcrypto::DCRTPoly>
signum_polycircuit(Ciphertext<lbcrypto::DCRTPoly> x,
                   CryptoContext<DCRTPoly> cc) {
    static std::vector<double> coeffVal(
        {0.0, 1.273238551875655,      0.0, -0.42441020299615195,
         0.0, 0.25464294463091813,    0.0, -0.18188441346502052,
         0.0, 0.1414621246790797,     0.0, -0.11573812786240627,
         0.0, 0.09792859592938771,    0.0, -0.08486774290277588,
         0.0, 0.07487956443817181,    0.0, -0.06699374222779464,
         0.0, 0.060609603030657114,   0.0, -0.055335403426138983,
         0.0, 0.05090475788583319,    0.0, -0.047130209924583284,
         0.0, 0.04387601518901265,    0.0, -0.04104146012469417,
         0.0, 0.03855024658252758,    0.0, -0.03634351598864421,
         0.0, 0.03437513594569943,    0.0, -0.032608437110679095,
         0.0, 0.031013905132874938,   0.0, -0.029567516702177325,
         0.0, 0.02824951931783838,    0.0, -0.02704352260561937,
         0.0, 0.025935812169532054,   0.0, -0.024914824890211098,
         0.0, 0.023970743023673285,   0.0, -0.02309517686032735,
         0.0, 0.02228091419263688,    0.0, -0.021521720738484625,
         0.0, 0.02081217982554621,    0.0, -0.02014756261194001,
         0.0, 0.019523722266175682,   0.0, -0.01893700709991235,
         0.0, 0.01838418880810082,    0.0, -0.017862402837514252,
         0.0, 0.017369098557746317,   0.0, -0.016901997404823507,
         0.0, 0.01645905754790819,    0.0, -0.016038443923073686,
         0.0, 0.015638502706528692,   0.0, -0.015257739478449196,
         0.0, 0.014894800469579828,   0.0, -0.014548456394487201,
         0.0, 0.014217588464629198,   0.0, -0.013901176245823208,
         0.0, 0.013598287082518175,   0.0, -0.013308066857936274,
         0.0, 0.013029731897283304,   0.0, -0.012762561852409518,
         0.0, 0.012505893431831745,   0.0, -0.012259114861258818,
         0.0, 0.012021660977185657,   0.0, -0.01179300887074859,
         0.0, 0.011572674011150957,   0.0, -0.011360206788175259,
         0.0, 0.011155189421870805,   0.0, -0.01095723319470323,
         0.0, 0.010765975967577387,   0.0, -0.010581079946370604,
         0.0, 0.010402229669937174,   0.0, -0.010229130194420174,
         0.0, 0.0100615054518764,     0.0, -0.009899096763970551,
         0.0, 0.009741661493956092,   0.0, -0.009588971822111917,
         0.0, 0.009440813631691612,   0.0, -0.009296985493879742,
         0.0, 0.009157297741669788,   0.0, -0.009021571623681564,
         0.0, 0.00888963853001945,    0.0, -0.008761339283049648,
         0.0, 0.008636523486940217,   0.0, -0.008515048930193126,
         0.0, 0.008396781036455175,   0.0, -0.008281592358758156,
         0.0, 0.008169362113677702,   0.0, -0.00805997575129042,
         0.0, 0.007953324558271782,   0.0, -0.00784930529067446,
         0.0, 0.007747819834356052,   0.0, -0.007648774890126664,
         0.0, 0.007552081682062596,   0.0, -0.007457655686541276,
         0.0, 0.007365416380710399,   0.0, -0.0072752870084570095,
         0.0, 0.007187194362735401,   0.0, -0.0071010685827052455,
         0.0, 0.00701684296473495,    0.0, -0.00693445378596558,
         0.0, 0.00685384013968303,    0.0, -0.006774943781375203,
         0.0, 0.006697708984867926,   0.0, -0.006622082407643203,
         0.0, 0.006548012964694983,   0.0, -0.00647545171038316,
         0.0, 0.006404351727524308,   0.0, -0.00633466802343561,
         0.0, 0.006266357432163378,   0.0, -0.0061993785227816576,
         0.0, 0.006133691512961605,   0.0, -0.0060692581878812445,
         0.0, 0.0060060418236348835,  0.0, -0.005944007115327876,
         0.0, 0.005883120109070612,   0.0, -0.005823348138047246,
         0.0, 0.005764659761999592,   0.0, -0.005707024710259541,
         0.0, 0.005650413827772119,   0.0, -0.005594799024235716,
         0.0, 0.005540153225824716,   0.0, -0.005486450329721153,
         0.0, 0.005433665160832674,   0.0, -0.005381773431052311,
         0.0, 0.005330751700396445,   0.0, -0.00528057734041608,
         0.0, 0.005231228499229695,   0.0, -0.005182684068631381,
         0.0, 0.0051349236525394075,  0.0, -0.005087927537380142,
         0.0, 0.005041676663585524,   0.0, -0.004996152598858104,
         0.0, 0.004951337512394882,   0.0, -0.004907214150690918,
         0.0, 0.0048637658142136496,  0.0, -0.004820976335464637,
         0.0, 0.004778830057815365,   0.0, -0.004737311815609309,
         0.0, 0.004696406914917171,   0.0, -0.004656101115463551,
         0.0, 0.0046163806131091474,  0.0, -0.004577232023391056,
         0.0, 0.004538642365568538,   0.0, -0.004500599047616488,
         0.0, 0.004463089851667025,   0.0, -0.004426102920283385,
         0.0, 0.004389626743207311,   0.0, -0.004353650144770997,
         0.0, 0.004318162271751679,   0.0, -0.004283152581928701,
         0.0, 0.004248610832880011,   0.0, -0.004214527071491774,
         0.0, 0.004180891623740119,   0.0, -0.00414769508501505,
         0.0, 0.004114928310772268,   0.0, -0.004082582407580133,
         0.0, 0.004050648724582761,   0.0, -0.0040191188452525575,
         0.0, 0.003987984579512912,   0.0, -0.003957237956147789,
         0.0, 0.003926871215543282,   0.0, -0.003896876802706868,
         0.0, 0.003867247360527829,   0.0, -0.0038379757233855403,
         0.0, 0.003809054910876625,   0.0, -0.0037804781219428277,
         0.0, 0.0037522387290591886,  0.0, -0.0037243302728028997,
         0.0, 0.003696746456451552,   0.0, -0.0036694811410190676,
         0.0, 0.003642528340159686,   0.0, -0.0036158822156582044,
         0.0, 0.0035895370726380512,  0.0, -0.0035634873554007142,
         0.0, 0.003537727642997629,   0.0, -0.003512252645321855,
         0.0, 0.0034870571990428803,  0.0, -0.0034621362639459577,
         0.0, 0.0034374849191339,     0.0, -0.0034130983596911105,
         0.0, 0.0033889718930624067,  0.0, -0.00336510093600543,
         0.0, 0.0033414810111902856,  0.0, -0.003318107744390611,
         0.0, 0.0032949768612646783,  0.0, -0.003272084184781894,
         0.0, 0.003249425632192008,   0.0, -0.0032269972126400203,
         0.0, 0.003204795024313184,   0.0, -0.0031828152522588083,
         0.0, 0.003161054165649607,   0.0, -0.0031395081158081505,
         0.0, 0.0031181735336131603,  0.0, -0.003097046927672171,
         0.0, 0.003076124881856238,   0.0, -0.0030554040536626475,
         0.0, 0.0030348811718096504,  0.0, -0.003014553034793531,
         0.0, 0.002994416508562611,   0.0, -0.0029744685252208534,
         0.0, 0.002954706080800933,   0.0, -0.0029351262340872246,
         0.0, 0.002915726104483704,   0.0, -0.0028965028709581294,
         0.0, 0.002877453769990715,   0.0, -0.0028585760946328777,
         0.0, 0.0028398671925144487,  0.0, -0.0028213244650208565,
         0.0, 0.0028029453654036876,  0.0, -0.0027847273979764034,
         0.0, 0.0027666681163556915,  0.0, -0.002748765122740043,
         0.0, 0.0027310160661865473,  0.0, -0.0027134186419668868,
         0.0, 0.0026959705899823184,  0.0, -0.002678669694055857,
         0.0, 0.002661513780553037,   0.0, -0.0026445007176353354,
         0.0, 0.002627628413986605,   0.0, -0.002610894818115687,
         0.0, 0.0025942979171366507,  0.0, -0.0025778357361310495,
         0.0, 0.002561506336964629,   0.0, -0.00254530781773364,
         0.0, 0.0025292383116047703,  0.0, -0.002513295986295378,
         0.0, 0.002497479042996037,   0.0, -0.002481785715889111,
         0.0, 0.0024662142710738582,  0.0, -0.0024507630061930533,
         0.0, 0.0024354302493184935,  0.0, -0.002420214358699194,
         0.0, 0.0024051137216255934,  0.0, -0.0023901267542535396,
         0.0, 0.0023752519004492235,  0.0, -0.002360487631722575,
         0.0, 0.0023458324460550674,  0.0, -0.002331284867858009,
         0.0, 0.00231684344689086,    0.0, -0.002302506758168507,
         0.0, 0.0022882734009650307,  0.0, -0.002274141998766793,
         0.0, 0.0022601111982224796,  0.0, -0.0022461796692044554,
         0.0, 0.002232346103751967,   0.0, -0.002218609216134907,
         0.0, 0.002204967741897062,   0.0, -0.0021914204378358252,
         0.0, 0.002177966081167718,   0.0, -0.00216460346945673,
         0.0, 0.0021513314198692507,  0.0, -0.0021381487690540725,
         0.0, 0.0021250543724752637,  0.0, -0.002112047104275763,
         0.0, 0.0020991258566491447,  0.0, -0.0020862895397207107,
         0.0, 0.0020735370809074967,  0.0, -0.0020608674248863636,
         0.0, 0.0020482795328750905,  0.0, -0.002035772382708208,
         0.0, 0.0020233449680909024,  0.0, -0.0020109962986690497,
         0.0, 0.001998725399354837,   0.0, -0.001986531310372114,
         0.0, 0.0019744130865962397,  0.0, -0.001962369797633444,
         0.0, 0.001950400527178225,   0.0, -0.0019385043730538603,
         0.0, 0.0019266804466646775,  0.0, -0.0019149278729768892,
         0.0, 0.0019032457900322658,  0.0, -0.0018916333489104235,
         0.0, 0.0018800897132627483,  0.0, -0.0018686140592885179,
         0.0, 0.0018572055753056406,  0.0, -0.0018458634616845852,
         0.0, 0.0018345869304439693,  0.0, -0.0018233752052502607,
         0.0, 0.0018122275209478162,  0.0, -0.0018011431236217088,
         0.0, 0.0017901212700944928,  0.0, -0.0017791612280507636,
         0.0, 0.0017682622754719994,  0.0, -0.00175742370086011,
         0.0, 0.0017466448025935117,  0.0, -0.0017359248892042957,
         0.0, 0.0017252632787443556,  0.0, -0.001714659299063408,
         0.0, 0.0017041122871814544,  0.0, -0.001693621589528711,
         0.0, 0.0016831865614722994,  0.0, -0.0016728065673106336,
         0.0, 0.001662480980125372,   0.0, -0.0016522091814888964,
         0.0, 0.00164199056149671,    0.0, -0.0016318245184385113,
         0.0, 0.0016217104588118747,  0.0, -0.0016116477970524827,
         0.0, 0.0016016359554787394,  0.0, -0.001591674364091116,
         0.0, 0.0015817624605076516,  0.0, -0.0015718996897383342,
         0.0, 0.0015620855042030638,  0.0, -0.0015523193633802048,
         0.0, 0.001542600733963213,   0.0, -0.0015329290894714345,
         0.0, 0.001523303910337303,   0.0, -0.0015137246836263926,
         0.0, 0.0015041909030980107,  0.0, -0.0014947020688960734,
         0.0, 0.0014852576876281294,  0.0, -0.0014758572720894084,
         0.0, 0.0014665003413278173,  0.0, -0.001457186420345492,
         0.0, 0.0014479150402296008,  0.0, -0.0014386857377819754,
         0.0, 0.0014294980557128705,  0.0, -0.0014203515422726673,
         0.0, 0.0014112457513864032,  0.0, -0.0014021802423733205,
         0.0, 0.001393154580020056,   0.0, -0.0013841683343591418,
         0.0, 0.0013752210806720847,  0.0, -0.0013663123993530204,
         0.0, 0.001357441875864185,   0.0, -0.0013486091005996171,
         0.0, 0.0013398136688888458,  0.0, -0.0013310551808107516,
         0.0, 0.0013223332412139876,  0.0, -0.0013136474596005053,
         0.0, 0.0013049974500181508,  0.0, -0.00129638283106064,
         0.0, 0.0012878032257222676,  0.0, -0.0012792582613939708,
         0.0, 0.0012707475697152496,  0.0, -0.001262270786607911,
         0.0, 0.0012538275521106596,  0.0, -0.0012454175103805518,
         0.0, 0.0012370403095757745,  0.0, -0.0012286956018687694,
         0.0, 0.001220383043283125,   0.0, -0.001212102293735904,
         0.0, 0.0012038530168750087,  0.0, -0.0011956348801412883,
         0.0, 0.00118744755456617,    0.0, -0.001179290714865798,
         0.0, 0.00117116403923105,    0.0, -0.0011630672094643673,
         0.0, 0.0011549999106695646,  0.0, -0.0011469618315065818,
         0.0, 0.0011389526638065587,  0.0, -0.0011309721028626475,
         0.0, 0.0011230198470423645,  0.0, -0.0011150955980833448,
         0.0, 0.00110719906063524,    0.0, -0.0010993299427337893,
         0.0, 0.0010914879551441696,  0.0, -0.0010836728119467977,
         0.0, 0.0010758842298778664,  0.0, -0.0010681219288753362,
         0.0, 0.0010603856314559464,  0.0, -0.0010526750632730752,
         0.0, 0.0010449899524248296,  0.0, -0.0010373300300985564,
         0.0, 0.0010296950298298716,  0.0, -0.0010220846881758448,
         0.0, 0.0010144987439307462,  0.0, -0.0010069369388875531,
         0.0, 0.000999399016932346,   0.0, -0.0009918847249212267,
         0.0, 0.0009843938117114833,  0.0, -0.0009769260290463802,
         0.0, 0.0009694811306289663,  0.0, -0.0009620588729473216,
         0.0, 0.0009546590143945243,  0.0, -0.000947281316061995,
         0.0, 0.0009399255409029253,  0.0, -0.0009325914544790314,
         0.0, 0.0009252788241706431,  0.0, -0.0009179874198919628,
         0.0, 0.0009107170132806663,  0.0, -0.0009034673785136857,
         0.0, 0.000896238291350905,   0.0, -0.0008890295301006389,
         0.0, 0.0008818408745425527,  0.0, -0.0008746721069823296,
         0.0, 0.0008675230111158489,  0.0, -0.0008603933730902288,
         0.0, 0.0008532829804449213,  0.0, -0.0008461916230681871,
         0.0, 0.0008391190921979665,  0.0, -0.0008320651813453611,
         0.0, 0.000825029685371135,   0.0, -0.0008180124013109176,
         0.0, 0.0008110131275066292,  0.0, -0.000804031664436479,
         0.0, 0.0007970678138212936,  0.0, -0.0007901213794931771,
         0.0, 0.0007831921664301451,  0.0, -0.0007762799817246405,
         0.0, 0.0007693846335510846,  0.0, -0.0007625059321219835,
         0.0, 0.0007556436887326282,  0.0, -0.0007487977166454553,
         0.0, 0.0007419678301482951,  0.0, -0.0007351538454925001,
         0.0, 0.0007283555798744769,  0.0, -0.0007215728524125843,
         0.0, 0.0007148054831584489,  0.0, -0.0007080532940222557,
         0.0, 0.0007013161077852876,  0.0, -0.0006945937490949542,
         0.0, 0.000687886043407445,   0.0, -0.0006811928179647344,
         0.0, 0.0006745139008588616,  0.0, -0.0006678491218683365,
         0.0, 0.0006611983116043863,  0.0, -0.0006545613023096713,
         0.0, 0.000647937927065512,   0.0, -0.0006413280205057086,
         0.0, 0.000634731418061645,   0.0, -0.0006281479567449442,
         0.0, 0.0006215774742521282,  0.0, -0.0006150198098525533,
         0.0, 0.0006084748035015074,  0.0, -0.0006019422966485215,
         0.0, 0.0005954221313993988,  0.0, -0.0005889141513675381,
         0.0, 0.0005824182007027252,  0.0, -0.0005759341251354782,
         0.0, 0.0005694617708136505,  0.0, -0.0005630009854910398,
         0.0, 0.0005565516172573678,  0.0, -0.0005501135158297399,
         0.0, 0.0005436865311995816,  0.0, -0.0005372705149631891,
         0.0, 0.0005308653189597401,  0.0, -0.0005244707966001992,
         0.0, 0.0005180868015206974,  0.0, -0.0005117131888946272,
         0.0, 0.0005053498140881896,  0.0, -0.0004989965339806617,
         0.0, 0.0004926532056141036,  0.0, -0.00048631968753673954,
         0.0, 0.000479995838379317,   0.0, -0.00047368151831464256,
         0.0, 0.0004673765875317343,  0.0, -0.0004610809077575121,
         0.0, 0.0004547943406677216,  0.0, -0.000448516749533346,
         0.0, 0.0004422479974646434,  0.0, -0.0004359879491404226,
         0.0, 0.0004297364691749807,  0.0, -0.00042349342355982317,
         0.0, 0.0004172586782797444,  0.0, -0.00041103210076597047,
         0.0, 0.00040481355817075285, 0.0, -0.000398602919336607,
         0.0, 0.00039240005266473374, 0.0, -0.0003862048281982859,
         0.0, 0.00038001711562018505, 0.0, -0.00037383678614602773,
         0.0, 0.0003676637106388877,  0.0, -0.0003614977615074119,
         0.0, 0.00035533881069203154, 0.0, -0.0003491867317448418,
         0.0, 0.0003430413977003729,  0.0, -0.0003369026831876949,
         0.0, 0.00033077046226657976, 0.0, -0.000324644610599247,
         0.0, 0.0003185250032679582,  0.0, -0.0003124115168924586,
         0.0, 0.000306304027534191,   0.0, -0.00030020241276160187,
         0.0, 0.00029410654954749955, 0.0, -0.0002880163163656561,
         0.0, 0.0002819315910829877,  0.0, -0.0002758522529995749,
         0.0, 0.00026977818084549036, 0.0, -0.0002637092547790861,
         0.0, 0.0002576453542635452,  0.0, -0.0002515863602928589,
         0.0, 0.0002455321530755362,  0.0, -0.00023948261434132335,
         0.0, 0.00023343762503804673, 0.0, -0.00022739706759763122,
         0.0, 0.00022136082366270521, 0.0, -0.00021532877630017045,
         0.0, 0.00020930080784300632, 0.0, -0.00020327680197767268,
         0.0, 0.0001972566416379655,  0.0, -0.00019124021111372065,
         0.0, 0.00018522739390759515, 0.0, -0.000179218074891294,
         0.0, 0.00017321213806612167, 0.0, -0.00016720946886073545,
         0.0, 0.00016120995177597592, 0.0, -0.00015521347270442033,
         0.0, 0.00014921991664376897, 0.0, -0.00014322916990898993,
         0.0, 0.0001372411179450177,  0.0, -0.00013125564749284527,
         0.0, 0.0001252726443887036,  0.0, -0.0001192919957433073,
         0.0, 0.00011331358775975863, 0.0, -0.00010733730789102605,
         0.0, 0.00010136304270875312, 0.0, -9.539067990918118e-05,
         0.0, 8.942010642554739e-05,  0.0, -8.345121017168439e-05,
         0.0, 7.748387838570357e-05,  0.0, -7.151799921391366e-05,
         0.0, 6.555346011130787e-05,  0.0, -5.95901494265071e-05,
         0.0});

    cc->Enable(lbcrypto::PKESchemeFeature::ADVANCEDSHE);

    Ciphertext<lbcrypto::DCRTPoly> outputC =
        cc->EvalChebyshevSeries(x, coeffVal, -1, 1);

    std::vector<Ciphertext<lbcrypto::DCRTPoly>> t(1024);
    int l = 512;
    t[1] = x;

    //--CHEBYSHEV series computation <--- this is very naively implemented---
    for (int i = 2; i < l + 1; i++) {
        const int j = (i - 1) / 2 + 1;
        auto prod = cc->EvalMult(t[j], t[i - j]);
        t[i] = cc->EvalAdd(prod, prod);
        if (2 * j == i) {
            cc->EvalSubInPlace(t[i], 1);
        } else {
            cc->EvalSubInPlace(t[i], t[2 * j - i]);
        }
    }

    //----------------------------  T1009,T1011,T1013,T1015
    //-----------------------------

    static std::vector<double> coeffVal2(
        {5.3627954846304366e-05, -4.766676484102891e-05, 4.170646728565051e-05,
         -3.574695081520454e-05});

    int len = 4;

    for (int i = 0; i < len; i++) {
        double coeff = coeffVal2[i];
        auto temp1 =
            cc->EvalMult(cc->EvalMult(t[1 + 2 * i], coeff * 64), t[16]);
        auto temp2 = cc->EvalMult(t[15 - 2 * i], coeff * 32);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[32]);
        temp2 = cc->EvalMult(t[15 - 2 * i], coeff * 16);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[64]);
        temp2 = cc->EvalMult(t[15 - 2 * i], coeff * 8);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[128]);
        temp2 = cc->EvalMult(t[15 - 2 * i], coeff * 4);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[256]);
        temp2 = cc->EvalMult(t[15 - 2 * i], coeff * 2);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[512]);
        temp2 = cc->EvalMult(t[15 - 2 * i], coeff);
        auto t59 = cc->EvalSub(temp1, temp2);
        outputC = cc->EvalAdd(outputC, t59);
    }

    //----------------------------  T1017,T1019 -----------------------------

    static std::vector<double> coeffVal3(
        {2.9788103390049553e-05, -2.3829813764789798e-05});
    len = 2;

    for (int i = 0; i < len; i++) {
        double coeff = coeffVal3[i];
        auto temp1 =
            cc->EvalMult(cc->EvalMult(t[1 + 2 * i], coeff * 128), t[8]);
        auto temp2 = cc->EvalMult(t[7 - 2 * i], coeff * 64);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[16]);
        temp2 = cc->EvalMult(t[7 - 2 * i], coeff * 32);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[32]);
        temp2 = cc->EvalMult(t[7 - 2 * i], coeff * 16);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[64]);
        temp2 = cc->EvalMult(t[7 - 2 * i], coeff * 8);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[128]);
        temp2 = cc->EvalMult(t[7 - 2 * i], coeff * 4);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[256]);
        temp2 = cc->EvalMult(t[7 - 2 * i], coeff * 2);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[512]);
        temp2 = cc->EvalMult(t[7 - 2 * i], coeff);
        auto t59 = cc->EvalSub(temp1, temp2);

        outputC = cc->EvalAdd(outputC, t59);
    }

    //----------------------------  T1021 -----------------------------

    static std::vector<double> coeffVal4({1.7871969994745013e-05});
    len = 1;

    for (int i = 0; i < len; i++) {
        double coeff = coeffVal4[i];
        auto temp1 =
            cc->EvalMult(cc->EvalMult(t[1 + 2 * i], coeff * 256), t[4]);
        auto temp2 = cc->EvalMult(t[3 - 2 * i], coeff * 128);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[8]);
        temp2 = cc->EvalMult(t[3 - 2 * i], coeff * 64);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[16]);
        temp2 = cc->EvalMult(t[3 - 2 * i], coeff * 32);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[32]);
        temp2 = cc->EvalMult(t[3 - 2 * i], coeff * 16);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[64]);
        temp2 = cc->EvalMult(t[3 - 2 * i], coeff * 8);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[128]);
        temp2 = cc->EvalMult(t[3 - 2 * i], coeff * 4);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[256]);
        temp2 = cc->EvalMult(t[3 - 2 * i], coeff * 2);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[512]);
        temp2 = cc->EvalMult(t[3 - 2 * i], coeff);
        auto t59 = cc->EvalSub(temp1, temp2);

        outputC = cc->EvalAdd(outputC, t59);
    }

    //----------------------------  T1023 -----------------------------

    static std::vector<double> coeffVal5({-1.1914460923282231e-05});
    len = 1;

    for (int i = 0; i < len; i++) {
        double coeff = coeffVal5[i];
        auto temp1 =
            cc->EvalMult(cc->EvalMult(t[1 + 2 * i], coeff * 512), t[2]);
        auto temp2 = cc->EvalMult(t[1 - 2 * i], coeff * 256);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[4]);
        temp2 = cc->EvalMult(t[1 - 2 * i], coeff * 128);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[8]);
        temp2 = cc->EvalMult(t[1 - 2 * i], coeff * 64);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[16]);
        temp2 = cc->EvalMult(t[1 - 2 * i], coeff * 32);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[32]);
        temp2 = cc->EvalMult(t[1 - 2 * i], coeff * 16);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[64]);
        temp2 = cc->EvalMult(t[1 - 2 * i], coeff * 8);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[128]);
        temp2 = cc->EvalMult(t[1 - 2 * i], coeff * 4);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[256]);
        temp2 = cc->EvalMult(t[1 - 2 * i], coeff * 2);
        temp1 = cc->EvalSub(temp1, temp2);
        temp1 = cc->EvalMult(temp1, t[512]);
        temp2 = cc->EvalMult(t[1 - 2 * i], coeff);
        auto t59 = cc->EvalSub(temp1, temp2);

        outputC = cc->EvalAdd(outputC, t59);
    }
    return Ciphertext<lbcrypto::DCRTPoly>(std::move(outputC));
}

Ciphertext<lbcrypto::DCRTPoly>
naive_discrete_sign(Ciphertext<lbcrypto::DCRTPoly> a,
                    CryptoContext<DCRTPoly> cc) {
    // https://github.com/FHE-Applications/FHE-Applications/blob/master/dev/CKKS-App/Sorting/src/main.cpp#L28
    double lowerBound = -1;
    double upperBound = 1;
    int polyDegree = 119;
    return cc->EvalChebyshevFunction(
        [](double x) -> double {
            if (x >= 0)
                return 1;
            else
                return 0;
        },
        a, lowerBound, upperBound, polyDegree);
}

Ciphertext<lbcrypto::DCRTPoly> tanh(Ciphertext<lbcrypto::DCRTPoly> a,
                                    CryptoContext<DCRTPoly> cc) {
    double lowerBound = -1;
    double upperBound = 1;
    int polyDegree = 1006;
    return cc->EvalChebyshevFunction(
        [](double x) -> double { return std::tanh(x * RAND_MAX); }, a,
        lowerBound, upperBound, polyDegree);
}

Ciphertext<lbcrypto::DCRTPoly> sign(Ciphertext<lbcrypto::DCRTPoly> x,
                                    CryptoContext<DCRTPoly> cc, SignFunc func,
                                    const SignConfig &Cfg) {
    switch (func) {
    case SignFunc::CompositeSign:
    default:
        return compositeSign(x, cc, Cfg.compos.dg, Cfg.compos.df);
    case SignFunc::SignumPolycircuit:
        return signum_polycircuit(x, cc);
    case SignFunc::Tanh:
        return tanh(x, cc);
    case SignFunc::NaiveDiscrete:
        return naive_discrete_sign(x, cc);
    }
}
